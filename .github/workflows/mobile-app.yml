on:
  push:
    branches: [ mobile-app ]

jobs:
  build_android:
    name: Build AAB
    runs-on: ubuntu-latest
    environment: Mobile-App
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install app dependencies
        run: npm install && npm install -g @ionic/cli

      - name: Build app
        run: ionic build

      - name: Capacitor sync
        run: npx cap sync

      - name: Build app bundle
        run: cd android && ./gradlew bundle

      - name: Extract Android signing key from env
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" > android/release.jks.base64
          base64 -d android/release.jks.base64 > android/release.decrypted.jks

      - name: Sign dev build
        run: jarsigner -keystore android/release.decrypted.jks -storepass "${{ secrets.KEYSTORE_PASSWORD_ANDROID }}" -keypass "${{ secrets.KEYSTORE_PASSWORD_ANDROID }}" -signedjar ./android/app/build/outputs/bundle/release/app-release-signed.aab ./android/app/build/outputs/bundle/release/app-release.aab release

      - name: Upload release bundle
        uses: actions/upload-artifact@v4
        with:
          name: app-android
          path: android/app/build/outputs/bundle/release/app-release-signed.aab
          retention-days: 1

  build_ios:
    runs-on: macos-14
    name: Build iOS app
    environment: Mobile-App
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_PROVISION_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Set up XCode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 15.4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install app dependencies
        run: npm install && npm install -g @ionic/cli

      - name: Build project app
        run: ionic build

      - name: Capacitor sync
        run: npx cap sync

      - name: Build project
        run: xcodebuild -workspace './ios/App/App.xcworkspace' -scheme App -destination generic/platform=iOS -archivePath App.xcarchive archive

      - name: Assemble IPA
        run: xcodebuild archive -archivePath App.xcarchive -exportArchive -exportOptionsPlist ./archive.plist -exportPath output -allowProvisioningUpdates

      - name: Upload release bundle
        uses: actions/upload-artifact@v4
        with:
          name: app-ios
          path: output/
          retention-days: 1

      - name: Upload to apple connect
        run: |
          # Create the .itmsp folder
          mkdir -p ./transporter/itmsp_folder.itmsp

          # Move your .ipa file into the .itmsp folder
          cp ./output/App.ipa ./transporter/itmsp_folder.itmsp

          # Generate the metadata.xml file
          fileSize=` stat -f %z output`
          md5Checksum=`md5 ./output/App.ipa  | cut -d "=" -f 2 | awk '{print $1}'`

          echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" > ./transporter/metadata.xml
          echo "<package xmlns=\"http://apple.com/itunes/importer\" version=\"software5.4\">" >> ./transporter/metadata.xml
          echo "    <software_assets apple_id=\"webmaster@ingeniumua.be\" app_platform=\"ios\">" >> ./transporter/metadata.xml
          echo "        <asset type=\"bundle\">" >> ./transporter/metadata.xml
          echo "        	<data_file>" >> ./transporter/metadata.xml
          echo "                <size>$fileSize</size>" >> ./transporter/metadata.xml
          echo "                <file_name>nap.ipa</file_name>" >> ./transporter/metadata.xml
          echo "            	  <checksum type=\"md5\">$md5Checksum</checksum>" >> ./transporter/metadata.xml
          echo "          </data_file>" >> ./transporter/metadata.xml
          echo "        </asset>" >> ./transporter/metadata.xml
          echo "    </software_assets>" >> ./transporter/metadata.xml
          echo "</package>" >> ./transporter/metadata.xml

          # Upload the .itmsp folder to iTunes Connect
          /Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/itms/bin/iTMSTransporter -m upload -u "Ingenium UA" -p "${{ secrets.APPLE_DEVELOPER_PASSWORD }}" -f ./transporter/itmsp_folder.itmsp -t DAV -t Signiant -k 100000 -v eXtreme
